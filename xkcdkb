#!/usr/bin/env python
"""XKCD file size

This program displays the sizes of the specified files in the manner described
at the following URI:

    http://xkcd.com/394/
"""

from __future__ import division

import os
import sys
import argparse
import math
import calendar
import datetime
import locale


# ---
# Classes

class Sizer:
    def __init__(self, name, suffix, unit, ratio):
        self.name = name
        self.suffix = suffix
        self.unit = unit
        self.ratio = ratio

    def build_format_string(self, name_width):
        indent = "    "

        name = "{name:>{width}}".format(
            name = self.name,
            width = name_width
        )

        size = "{size}"

        if self.suffix is None:
            suffix = ""
        else:
            suffix = self.suffix

        unit = self.unit

        format_str = "{}{}: {}{} {}".format(indent, name, size, suffix, unit)

        self.format_string = format_str

    def get_size(self, real_size):
        size = math.ceil(real_size/self.ratio)

        size_str = locale.format("%d",size, grouping=True)

        return self.format_string.format(size = size_str)


# ---
# Main code path

def main():
    filenames = init()

    sizers = init_sizers()

    real_sizes = system_sizes(filenames)

    for filename in filenames:
        print("{}:".format(filename))

        for sizer in sizers:
            print(sizer.get_size(real_sizes[filename]))

# ---
# Lifecycle

def init():
    # Set locale to user default locale, for supporting number separators
    locale.setlocale(locale.LC_ALL, '')

    # Process arguments
    parser = argparse.ArgumentParser()

    parser.add_argument('filenames', nargs='+', metavar='file', help="the files to inspect")

    args = parser.parse_args()

    return args.filenames


def init_sizers():
    sizers = []

    sizers.append(Sizer("KILOBYTE", None, "kB", _kilobyte_ratio()))
    sizers.append(Sizer("KELLY-BOOTLE STANDARD UNIT", None, "KB", 1012))
    sizers.append(Sizer("IMAGINARY KILOBYTE", "i", "KiB", 1024))
    sizers.append(Sizer("INTEL KILOBYTE", None, "kb", 1023.937528))
    sizers.append(Sizer("DRIVEMAKER'S KILOBYTE", None, "Kb", _drivemaker_ratio()))
    sizers.append(Sizer("BAKER'S KILOBYTE", None, "KBa", 1152))

    max_name_len = max([len(e.name) for e in sizers])

    for sizer in sizers:
        sizer.build_format_string(max_name_len)

    return sizers


# ---
# Utility functions

def system_size(filename):
    statinfo = os.stat(filename)

    return statinfo.st_size

def system_sizes(filenames):
    sizes = {}

    for filename in filenames:
        try:
            sizes[filename] = system_size(filename)
        except OSError as e:
            print "ERROR: {}".format(e)
            sys.exit(1)

    return sizes

# ---
# Sizing functions

def _kilobyte_ratio():
    now = datetime.datetime.now()

    if (calendar.isleap(now.year)):
        return 1000
    else:
        return 1024


def _drivemaker_ratio():
    # Was 908 bytes on March 10, 2008
    reference_value = 908

    now = datetime.datetime.now()

    bytes_change = 4 * (now.year - 2008)

    return reference_value - bytes_change
    
# ---
# Run

main()

